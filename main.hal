# #######################################
#
# HAL file for HostMot2 and Mesa 7i96 + 7i85S 
# - 3 steppers for X Y Z
# - 3 encoders for closed loop for those axis
# - 1 spindle
#
# Original file:
# Derived from Ted Hyde's original hm2-servo config
# Based up work and discussion with Seb & Peter & Jeff
# GNU license references - insert here. www.linuxcnc.org
#
# Extended and modified by ioeides and bouni from Reaktor23 Hackerspace
#
# #####################################################################

# ###################################
# Core EMC/HAL Loads
# ###################################

# kinematics
loadrt [KINS]KINEMATICS
#autoconverted  trivkins

# motion controller
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS 

# standard components
loadrt pid num_chan=3 

# hostmot2 driver
loadrt hostmot2

# load low-level driver
loadrt [HOSTMOT2](DRIVER) config=[HOSTMOT2](CONFIG)

setp hm2_[HOSTMOT2](BOARD).0.watchdog.timeout_ns 25000000

# ################################################
# THREADS
# ################################################

addf hm2_[HOSTMOT2](BOARD).0.read         servo-thread
addf motion-command-handler               servo-thread
addf motion-controller                    servo-thread
addf pid.[JOINT_0](PID).do-pid-calcs      servo-thread
addf pid.[JOINT_1](PID).do-pid-calcs      servo-thread
addf pid.[JOINT_2](PID).do-pid-calcs      servo-thread
addf hm2_[HOSTMOT2](BOARD).0.write        servo-thread

# latch 50 usec before nominal read time:
setp hm2_[HOSTMOT2](BOARD).0.dpll.01.timer-us -50
setp hm2_[HOSTMOT2](BOARD).0.stepgen.timer-number 1

# set packet read timeout to 20% of servo thread
setp hm2_[HOSTMOT2](BOARD).0.packet-read-timeout 70

# ################
# X [0] Axis
# ################

setp pid.[JOINT_0](PID).Pgain        [JOINT_0]P
setp pid.[JOINT_0](PID).Igain        [JOINT_0]I
setp pid.[JOINT_0](PID).Dgain        [JOINT_0]D
setp pid.[JOINT_0](PID).bias         [JOINT_0]BIAS
setp pid.[JOINT_0](PID).FF0          [JOINT_0]FF0
setp pid.[JOINT_0](PID).FF1          [JOINT_0]FF1
setp pid.[JOINT_0](PID).FF2          [JOINT_0]FF2
setp pid.[JOINT_0](PID).deadband     [JOINT_0]DEADBAND
setp pid.[JOINT_0](PID).maxoutput    [JOINT_0]MAX_OUTPUT

net x-index-enable  pid.[JOINT_0](PID).index-enable      <= joint.0.index-enable     => hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_0](ENCODER).index-enable  
net x-enable        pid.[JOINT_0](PID).enable            <= joint.0.amp-enable-out   => hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_0](STEPGEN).enable 
net x-output        pid.[JOINT_0](PID).output                                        => hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_0](STEPGEN).velocity-cmd
net x-pos-cmd       pid.[JOINT_0](PID).command           <= joint.0.motor-pos-cmd
net x-vel-fb        pid.[JOINT_0](PID).feedback-deriv                                => hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_0](ENCODER).velocity     
net x-pos-fb        pid.[JOINT_0](PID).feedback          <= joint.0.motor-pos-fb     => hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_0](ENCODER).position    

setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_0](STEPGEN).dirsetup                [JOINT_0]DIRSETUP
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_0](STEPGEN).dirhold                 [JOINT_0]DIRHOLD
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_0](STEPGEN).steplen                 [JOINT_0]STEPLEN
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_0](STEPGEN).stepspace               [JOINT_0]STEPSPACE
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_0](STEPGEN).position-scale          [JOINT_0]SCALE
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_0](STEPGEN).step_type               0
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_0](STEPGEN).control-type            1
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_0](STEPGEN).maxvel                  [JOINT_0]STEPGEN_MAX_VEL
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_0](STEPGEN).maxaccel                [JOINT_0]STEPGEN_MAX_ACC

setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_0](ENCODER).counter-mode            0
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_0](ENCODER).filter                  1
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_0](ENCODER).index-invert            0
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_0](ENCODER).index-mask              0
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_0](ENCODER).index-mask-invert       0
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_0](ENCODER).scale 			        [JOINT_0]ENCODER_SCALE

net X-pos-lim 		                                        joint.0.pos-lim-sw-in   => hm2_[HOSTMOT2](BOARD).0.gpio.004.in_not 
net X-neg-lim-home	                joint.0.home-sw-in      joint.0.neg-lim-sw-in   => hm2_[HOSTMOT2](BOARD).0.gpio.005.in_not

# ################
# Y [1] Axis
# ################

setp pid.[JOINT_1](PID).Pgain        [JOINT_1]P
setp pid.[JOINT_1](PID).Igain        [JOINT_1]I
setp pid.[JOINT_1](PID).Dgain        [JOINT_1]D
setp pid.[JOINT_1](PID).bias         [JOINT_1]BIAS
setp pid.[JOINT_1](PID).FF0          [JOINT_1]FF0
setp pid.[JOINT_1](PID).FF1          [JOINT_1]FF1
setp pid.[JOINT_1](PID).FF2          [JOINT_1]FF2
setp pid.[JOINT_1](PID).deadband     [JOINT_1]DEADBAND
setp pid.[JOINT_1](PID).maxoutput    [JOINT_1]MAX_OUTPUT

net Y-index-enable  pid.[JOINT_1](PID).index-enable      <= joint.1.index-enable     => hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_1](ENCODER).index-enable  
net Y-enable        pid.[JOINT_1](PID).enable            <= joint.1.amp-enable-out   => hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_1](STEPGEN).enable 
net Y-output        pid.[JOINT_1](PID).output                                        => hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_1](STEPGEN).velocity-cmd
net Y-pos-cmd       pid.[JOINT_1](PID).command           <= joint.1.motor-pos-cmd
net Y-vel-fb        pid.[JOINT_1](PID).feedback-deriv                                => hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_1](ENCODER).velocity     
net Y-pos-fb        pid.[JOINT_1](PID).feedback          <= joint.1.motor-pos-fb     => hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_1](ENCODER).position    

setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_1](STEPGEN).dirsetup                [JOINT_1]DIRSETUP
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_1](STEPGEN).dirhold                 [JOINT_1]DIRHOLD
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_1](STEPGEN).steplen                 [JOINT_1]STEPLEN
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_1](STEPGEN).stepspace               [JOINT_1]STEPSPACE
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_1](STEPGEN).position-scale          [JOINT_1]SCALE
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_1](STEPGEN).step_type               0
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_1](STEPGEN).control-type            1
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_1](STEPGEN).maxvel                  [JOINT_1]STEPGEN_MAX_VEL
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_1](STEPGEN).maxaccel                [JOINT_1]STEPGEN_MAX_ACC

setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_1](ENCODER).counter-mode            0
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_1](ENCODER).filter                  1
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_1](ENCODER).index-invert            0
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_1](ENCODER).index-mask              0
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_1](ENCODER).index-mask-invert       0
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_1](ENCODER).scale 			        [JOINT_1]ENCODER_SCALE

net Y-neg-lim 		                    joint.1.neg-lim-sw-in   => hm2_[HOSTMOT2](BOARD).0.gpio.003.in_not 
net Y-pos-lim-home  joint.1.home-sw-in  joint.1.pos-lim-sw-in   => hm2_[HOSTMOT2](BOARD).0.gpio.002.in_not

# ################
# Z [2] Axis
# ################

setp pid.[JOINT_2](PID).Pgain        [JOINT_2]P
setp pid.[JOINT_2](PID).Igain        [JOINT_2]I
setp pid.[JOINT_2](PID).Dgain        [JOINT_2]D
setp pid.[JOINT_2](PID).bias         [JOINT_2]BIAS
setp pid.[JOINT_2](PID).FF0          [JOINT_2]FF0
setp pid.[JOINT_2](PID).FF1          [JOINT_2]FF1
setp pid.[JOINT_2](PID).FF2          [JOINT_2]FF2
setp pid.[JOINT_2](PID).deadband     [JOINT_2]DEADBAND
setp pid.[JOINT_2](PID).maxoutput    [JOINT_2]MAX_OUTPUT

net Z-index-enable  pid.[JOINT_2](PID).index-enable      <= joint.2.index-enable     => hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_2](ENCODER).index-enable  
net Z-enable        pid.[JOINT_2](PID).enable            <= joint.2.amp-enable-out   => hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_2](STEPGEN).enable 
net Z-output        pid.[JOINT_2](PID).output                                        => hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_2](STEPGEN).velocity-cmd
net Z-pos-cmd       pid.[JOINT_2](PID).command           <= joint.2.motor-pos-cmd
net Z-vel-fb        pid.[JOINT_2](PID).feedback-deriv                                => hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_2](ENCODER).velocity     
net Z-pos-fb        pid.[JOINT_2](PID).feedback          <= joint.2.motor-pos-fb     => hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_2](ENCODER).position    

setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_2](STEPGEN).dirsetup                [JOINT_2]DIRSETUP
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_2](STEPGEN).dirhold                 [JOINT_2]DIRHOLD
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_2](STEPGEN).steplen                 [JOINT_2]STEPLEN
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_2](STEPGEN).stepspace               [JOINT_2]STEPSPACE
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_2](STEPGEN).position-scale          [JOINT_2]SCALE
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_2](STEPGEN).step_type               0
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_2](STEPGEN).control-type            1
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_2](STEPGEN).maxvel                  [JOINT_2]STEPGEN_MAX_VEL
setp hm2_[HOSTMOT2](BOARD).0.stepgen.[JOINT_2](STEPGEN).maxaccel                [JOINT_2]STEPGEN_MAX_ACC

setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_2](ENCODER).counter-mode            0
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_2](ENCODER).filter                  1
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_2](ENCODER).index-invert            0
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_2](ENCODER).index-mask              0
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_2](ENCODER).index-mask-invert       0
setp hm2_[HOSTMOT2](BOARD).0.encoder.[JOINT_2](ENCODER).scale 			        [JOINT_2]ENCODER_SCALE

net Z-neg-lim 		                    joint.2.neg-lim-sw-in   => hm2_[HOSTMOT2](BOARD).0.gpio.001.in_not 
net Z-pos-lim-home  joint.2.home-sw-in  joint.2.pos-lim-sw-in   => hm2_[HOSTMOT2](BOARD).0.gpio.000.in_not

# ##################################################
# Standard I/O Block - EStop, Etc
# ##################################################

# E-Stop
net estop-loop          iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in
net machine-e-stop      halui.estop.activate        => hm2_[HOSTMOT2](BOARD).0.gpio.006.in_not 

# Power On
net machine-power-on    halui.machine.is-on         => hm2_[HOSTMOT2](BOARD).0.ssr.00.out-00

# Tool loading loopback
net tool-prep-loop      iocontrol.0.tool-prepare    => iocontrol.0.tool-prepared
net tool-change-loop    iocontrol.0.tool-change     => iocontrol.0.tool-changed

